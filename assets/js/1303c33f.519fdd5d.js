"use strict";(self.webpackChunkpush_doc_hub_v_2=self.webpackChunkpush_doc_hub_v_2||[]).push([[8972],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={},i=void 0,c={unversionedId:"dev/chat/ui-components/ChatViewComponent",id:"dev/chat/ui-components/ChatViewComponent",title:"ChatViewComponent",description:"- ChatViewComponent",source:"@site/docs/dev/chat/ui-components/06-ChatViewComponent.mdx",sourceDirName:"dev/chat/ui-components",slug:"/dev/chat/ui-components/ChatViewComponent",permalink:"/dev/chat/ui-components/ChatViewComponent",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-documentation/docs/dev/chat/ui-components/06-ChatViewComponent.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"pushChatSidebar",previous:{title:"ChatProfile",permalink:"/dev/chat/ui-components/ChatProfile"},next:{title:"Theme",permalink:"/dev/chat/ui-components/Theme"}},p={},s=[],l={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ChatViewComponent"),(0,a.kt)("h3",{parentName:"li",id:"want-to-add-the-entire-chat-component-in-your-website-but-dont-have-the-time-to-code-the-entire-message-body-ui--import-chatviewcomponent-pass-the-chatid-and-there-you-have-it-"},"want to add the entire chat component in your website but don\u2019t have the time to code the entire message body UI ? import ChatViewComponent, pass the chatId and there you have it !"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Inputs",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  messageInput?: boolean; // default true\n  chatViewList?: boolean; // default true\n  chatProfile?: boolean; // default true\n  chatId: string;\n  limit?: number;\n  emoji?: boolean; // default true\n  gif?: boolean; // default true\n  file?: boolean;  // default true\n  isConnected?: boolean;  // default true\n  onClick?: (() => void()) // use this to pass a function when the user is not verified as per the rules of access control\n"))),(0,a.kt)("li",{parentName:"ul"},"Example",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{parentName:"p",src:"https://github.com/KlausMikhaelson/KlausMikhaelson/assets/100528412/385bbdb3-1536-4128-a773-ffae1d7ed1fe",alt:"Example Image"})),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"\nimport { ChatViewComponent } from '@pushprotocol/uiweb';\n\nconst ChatViewComponentTest = () => {\n// you can add the amount of msgs that you want to fetch when the user first sees the component\n// by default the message fetch limit is 10.\n// by default image, file and gif option is there,\n// if you don't want any of them then just pass it as false inside the component\n// for example below commented code won't have the option for file, gif and emoji:\n/// <ChatViewComponent chatId='89f7b382b9b1496dca2b9a94ef87c80dd102db05dcb40b165fabfab28770fd55' emoji={false} gif={false} file={false} limit={10}/>\n  return (\n    <div>\n      <ChatViewComponent chatId='89f7b382b9b1496dca2b9a94ef87c80dd102db05dcb40b165fabfab28770fd55' limit={10}/>\n    </div>\n  );\n};\n\nexport default ChatViewComponentTest;\n")))))))))}m.isMDXComponent=!0}}]);