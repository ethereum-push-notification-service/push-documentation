"use strict";(self.webpackChunkpush_doc_hub_v_2=self.webpackChunkpush_doc_hub_v_2||[]).push([[8935],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),h=p(n),l=o,y=h["".concat(c,".").concat(l)]||h[l]||d[l]||i;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=l;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[h]="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},7081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={id:"devs-chat-encryption-version-in-push-chat",title:"Encryption Version in Push Chat",hide_title:!0,slug:"./encryption-version-in-push-chat",displayed_sidebar:"pushChatSidebar",sidebar_position:2},s="Encryption in Push Chat",a={unversionedId:"devs/chat/concepts/devs-chat-encryption-version-in-push-chat",id:"devs/chat/concepts/devs-chat-encryption-version-in-push-chat",title:"Encryption Version in Push Chat",description:"Each Push profile or user of Push Chat has a PGP key that is created locally and stored encrypted on Push nodes. Push SDK during initialization automatically decrypts your key by asking you to sign a nonce which is used to derive the signature that is applied to encrypt or decrypt your PGP keys.",source:"@site/docs/devs/chat/concepts/02-Concepts-Encryption-Version.mdx",sourceDirName:"devs/chat/concepts",slug:"/devs/chat/concepts/encryption-version-in-push-chat",permalink:"/devs/chat/concepts/encryption-version-in-push-chat",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-documentation/docs/devs/chat/concepts/02-Concepts-Encryption-Version.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"devs-chat-encryption-version-in-push-chat",title:"Encryption Version in Push Chat",hide_title:!0,slug:"./encryption-version-in-push-chat",displayed_sidebar:"pushChatSidebar",sidebar_position:2},sidebar:"pushChatSidebar",previous:{title:"Push Chat Architecture",permalink:"/devs/chat/concepts/push-chat-architecture"}},c={},p=[{value:"Recommended encryption version for Push Profile",id:"recommended-encryption-version-for-push-profile",level:2}],u={toc:p},h="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"encryption-in-push-chat"},"Encryption in Push Chat"),(0,o.kt)("p",null,"Each Push profile or user of Push Chat has a PGP key that is created locally and stored encrypted on Push nodes. Push SDK during initialization automatically decrypts your key by asking you to sign a nonce which is used to derive the signature that is applied to encrypt or decrypt your PGP keys."),(0,o.kt)("p",null,"Once the PGP keys are obtained locally, they are then used (in your local sandbox) to encrypt / decrypt messages, chat requests and anything that you do within Push network. "),(0,o.kt)("p",null,"Since your wallet acts only as a way to encrypt or decrypt your PGP keys and your keys encryption are not reliant or tied direcly to a particular algorithm. This paves the way for cross-chain or even multi-chain communication as dynamic versions compatible with different chains or new standards can be applied."),(0,o.kt)("p",null,"This is possible because Push maintains your PGP keys encryption version and thus is able to decrypt them using the correct standards."),(0,o.kt)("h2",{id:"recommended-encryption-version-for-push-profile"},"Recommended encryption version for Push Profile"),(0,o.kt)("p",null,"Current recommended encryption version for Push Profile is ",(0,o.kt)("inlineCode",{parentName:"p"},"ENC_TYPE_V3")," and for Push NFT profiles is ",(0,o.kt)("inlineCode",{parentName:"p"},"NFTPGP_V1"),"."))}d.isMDXComponent=!0}}]);