"use strict";(self.webpackChunkpush_doc_hub_v_2=self.webpackChunkpush_doc_hub_v_2||[]).push([[6313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,m=p["".concat(c,".").concat(h)]||p[h]||b[h]||o;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,s={unversionedId:"devs/chat/uiweb/ChatViewBubble",id:"devs/chat/uiweb/ChatViewBubble",title:"ChatViewBubble",description:"- ChatViewBubble",source:"@site/docs/devs/chat/uiweb/02-ChatViewBubble.mdx",sourceDirName:"devs/chat/uiweb",slug:"/devs/chat/uiweb/ChatViewBubble",permalink:"/devs/chat/uiweb/ChatViewBubble",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-documentation/docs/devs/chat/uiweb/02-ChatViewBubble.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"pushChatSidebar",previous:{title:"ChatUIProvider",permalink:"/devs/chat/uiweb/ChatUIProvider"},next:{title:"ChatViewList",permalink:"/devs/chat/uiweb/ChatViewList"}},c={},u=[],l={toc:u},p="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ChatViewBubble"),(0,r.kt)("h3",{parentName:"li",id:"add-chat-message-bubble-ui"},"Add Chat Message Bubble UI"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Inputs",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"decryptedMessagePayload: IMessagePayload"))),(0,r.kt)("li",{parentName:"ul"},"Example",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{parentName:"p",src:"https://github.com/KlausMikhaelson/KlausMikhaelson/assets/100528412/6bc0691c-3ef3-4b09-a9a1-04a036a47a50",alt:"Example Image"})),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { ChatViewBubble } from "@pushprotocol/uiweb";\nimport { useEffect, useContext, useState } from "react";\nimport { EnvContext, Web3Context } from "../context";\nimport * as PUSHAPI from "@pushprotocol/restapi"\nimport { ENV } from "@pushprotocol/uiweb";\nimport { IMessagePayload } from "@pushprotocol/uiweb";\n\nexport const ChatViewBubbles = () => {\n    const { env } = useContext<any>(EnvContext);\n\n    const { library, account } = useContext<any>(Web3Context)\n    const [message, setMessage] = useState<IMessagePayload[]>([])\n    const [conversationHash, setConversationHash] = useState<string>(\'\');\n\n    const librarySigner = library.getSigner()\n\n    const fetchMessage = async () => {\n        const user = await PUSHAPI.user.get({\n            account: account\n        })\n        const pgpPrivateKey = await PUSHAPI.chat.decryptPGPKey({\n            encryptedPGPPrivateKey: user.encryptedPrivateKey,\n            signer: librarySigner,\n            env: env\n        })\n\n        const ConversationHash = await PUSHAPI.chat.conversationHash({\n            account: `eip155:${account}`,\n            conversationId: \'196f58cbe07c7eb5716d939e0a3be1f15b22b2334d5179c601566600016860ac\',\n            env: env\n        });\n        setConversationHash(ConversationHash.threadHash);\n        if (ConversationHash?.threadHash) {\n            const chatHistory = await PUSHAPI.chat.history({\n                threadhash: conversationHash,\n                account: account,\n                limit: 10,\n                toDecrypt: true,\n                pgpPrivateKey: pgpPrivateKey ? pgpPrivateKey : undefined,\n                env: env\n            })\n            setMessage(chatHistory)\n            console.log(chatHistory)\n        }\n    }\n\n    useEffect(() => {\n        fetchMessage()\n    }, [])\n\n    return (\n        <div>\n            {message.map((msg) => (\n                <ChatViewBubble chat={msg} />\n            ))}\n        </div>\n    )\n}\n')))))))))}b.isMDXComponent=!0}}]);